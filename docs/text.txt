Framework :
        - Go Fiber

Database :
        - RDBMS --> PostgreSQL
        - GORM
        - DB Models
                -User
                -Admin
                -Product
                -Order
                -Inventory
        -SQL Jions

API Structure : 

User-Side APIs:

- POST /api/users/signup          (Create a new user)
- POST /api/users/login           (User authentication)
- GET  /api/products              (Search for products)
- GET  /api/products/:id          (Get a specific product)
- POST /api/orders                (Place an order)
- GET  /api/users/dashboard       (View user's order history)

Admin-Side APIs:

- POST   /api/admin/sign-up        (Add a new admin)
- POST   /api/admin/login          (Admin authentication)
- POST   /api/admin/products       (Add a new product)
- PUT    /api/admin/products/:id   (Update a product)
- DELETE /api/admin/products/:id   (Remove a product)
- GET    /api/admin/orders         (Get all orders with filters/sorting)

        filters and Sorting :

                -Get all orders: /api/admin/orders
                -Filter by user ID: /api/admin/orders?user_id=1
                -Filter by product ID: /api/admin/orders?product_id=1
                -Sort by total price (ascending): /api/admin/orders?sort_by=total_price&order_by=asc

- GET    /api/admin/stats          (Get statistics on orders, inventory, etc.)

        Stats on Orders and Inventory :

                -Total Orders: Number of orders placed.
                -Total Revenue: Total revenue generated from orders.
                -Low Stock Products: Products with low inventory (quantity below a threshold).
                -Total Users: Number of registered users.
                -Recent Orders: A list of the most recent orders (you can adjust the Limit as needed).
                -Average Order Value: Calculated by dividing total revenue by the number of orders.



Database Trigger:

Dynamic Pricing Trigger 

CREATE OR REPLACE FUNCTION update_dynamic_pricing()
RETURNS TRIGGER AS $$
DECLARE
    current_quantity INT;
    demand_factor    FLOAT; -- Calculate this based on recent sales.
    availability_factor FLOAT;
BEGIN
    -- 1. Fetch the current quantity
    SELECT quantity INTO current_quantity FROM products WHERE id = NEW.id; 

    -- 2. Calculate availability factor (e.g., low stock = higher price)
    availability_factor := 1.0 / (current_quantity + 1);

    -- 3. Calculate the new dynamic price
    NEW.price := NEW.price * (1 + demand_factor) * availability_factor; 

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER dynamic_pricing_trigger
BEFORE UPDATE OF quantity ON products
FOR EACH ROW
EXECUTE FUNCTION update_dynamic_pricing();


